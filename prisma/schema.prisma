generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Start: Generated by Better Auth
// You can add field only in User schema, but not modify the other field and rest of better auth schema
model User {
  id               String             @id @map("_id")
  name             String
  email            String
  emailVerified    Boolean            @default(false)
  image            String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt
  sessions         Session[]
  accounts         Account[]
  role             Role               @default(USER)
  // Relasi dengan data user
  agents           Agent[]
  groups           Group[]
  rotationSettings RotationSettings[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @map("_id")
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

enum Role {
  ADMIN
  USER
}

// End: Generated by Better Auth

// Model untuk agen WhatsApp

model Agent {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  phoneNumber String
  isActive    Boolean  @default(true)
  userId      String // Owner of this agent
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relasi dengan User (owner)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relasi dengan groups melalui AgentGroup
  agentGroups AgentGroup[]
  // Relasi dengan clicks untuk analytics
  clicks      Click[]

  // Unique constraint per user untuk phoneNumber
  @@unique([userId, phoneNumber])
  @@map("agents")
}

// Model untuk grup agen

model Group {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String
  description String?
  isActive    Boolean  @default(true)
  strategy    String   @default("round-robin") // round-robin, random, weighted
  userId      String // Owner of this group
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relasi dengan User (owner)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relasi dengan agents melalui AgentGroup
  agentGroups AgentGroup[]
  // Relasi dengan clicks untuk analytics
  clicks      Click[]

  // Unique constraint per user untuk name dan slug
  @@unique([userId, name])
  @@unique([userId, slug])
  @@map("groups")
}

// Model untuk relasi many-to-many antara Agent dan Group

model AgentGroup {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  agentId   String   @db.ObjectId
  groupId   String   @db.ObjectId
  weight    Int      @default(1)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relasi dengan Agent dan Group
  agent Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  // Composite unique index untuk mencegah duplikasi
  @@unique([agentId, groupId])
  @@map("agent_groups")
}

// Model untuk log klik/analytics

model Click {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  agentId   String   @db.ObjectId
  groupId   String?  @db.ObjectId // Optional, bisa null untuk backward compatibility
  userAgent String?
  ipAddress String?
  referrer  String?
  createdAt DateTime @default(now())

  // Relasi dengan Agent dan Group
  agent Agent  @relation(fields: [agentId], references: [id], onDelete: Cascade)
  group Group? @relation(fields: [groupId], references: [id], onDelete: SetNull)

  @@map("clicks")
}

// Model untuk pengaturan rotasi per user

model RotationSettings {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  strategy  String   @default("round-robin") // round-robin, random, weighted
  userId    String // Owner of these settings
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relasi dengan User (owner)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Unique constraint per user
  @@unique([userId])
  @@map("rotation_settings")
}
